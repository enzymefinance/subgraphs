import { Context } from '@enzymefinance/subgraph-cli';
import { Variables } from '../subgraph.config';
import { Deployment, Version } from '@enzymefinance/environment';
import { getEnvironment } from '@enzymefinance/environment/deployments/all';

const environment = getEnvironment(Deployment.BASE, Version.SULU);

export const base: Context<Variables> = {
  name: 'enzyme-core-base',
  network: 'base',
  variables: {
    block: environment.deployment.inception,
    wethTokenAddress: environment.namedTokens.weth.id,
    wrappedNativeTokenAddress: environment.namedTokens.nativeTokenWrapper.id,
    chainlinkAggregatorAddresses: {
      audUsd: '0x0000000000000000000000000000000000000000',
      btcEth: '0x0000000000000000000000000000000000000000',
      btcusd: '0x64c911996D3c6aC71f9b455B1E8E7266BcbD848F',
      chfusd: '0x0000000000000000000000000000000000000000',
      ethUsd: '0x71041dddad3595F9CEd3DcCFBe3D1F4b0a16Bb70',
      eurUsd: '0xc91D87E81faB8f93699ECf7Ee9B44D11e1D53F0F',
      gbpUsd: '0x0000000000000000000000000000000000000000',
      jpyUsd: '0x0000000000000000000000000000000000000000',
    },
    external: {
      balancerMinterAddress: '0x0000000000000000000000000000000000000000',
      curveMinterAddress: '0x0000000000000000000000000000000000000000',
      cvxLockerV2Address: '0x0000000000000000000000000000000000000000',
      cvxAddress: '0x0000000000000000000000000000000000000000',
      mplAddress: '0x0000000000000000000000000000000000000000',
      grtAddress: '0x0000000000000000000000000000000000000000',
      theGraphStakingProxyAddress: '0x0000000000000000000000000000000000000000',
      lusdAddress: '0x0000000000000000000000000000000000000000',
      compAddress: '0x0000000000000000000000000000000000000000',
      // morphoBlueAddress: "0x0000000000000000000000000000000000000000",
      aliceOrderManager: '0x0000000000000000000000000000000000000000',
      stethAddress: '0x0000000000000000000000000000000000000000',
      ethxAddress: '0x0000000000000000000000000000000000000000',
    },
    persistent: {
      addressListRegistryAddress: environment.contracts.AddressListRegistry,
      dispatcherAddress: environment.contracts.Dispatcher,
      externalPositionFactoryAddress: environment.contracts.ExternalPositionFactory,
      gatedRedemptionQueueSharesWrapperFactoryAddress: environment.contracts.GatedRedemptionQueueSharesWrapperFactory,
      manualValueOracleFactoryAddress: environment.contracts.ManualValueOracleFactory,
      pendleMarketsRegistryAddress: environment.contracts.PendleMarketsRegistry,
      protocolFeeReserveLibAddress: environment.contracts.ProtocolFeeReserveLib,
      sharesSplitterFactoryAddress: environment.contracts.SharesSplitterFactory,
      singleAssetRedemptionQueueFactoryAddress: environment.contracts.SingleAssetRedemptionQueueFactory,
      uintListRegistryAddress: environment.contracts.UintListRegistry,
    },
    releases: {
      v2: {
        adapterBlacklistAddress: '0x0000000000000000000000000000000000000000',
        adapterWhitelistAddress: '0x0000000000000000000000000000000000000000',
        aggregatedDerivativePriceFeedAddress: '0x0000000000000000000000000000000000000000',
        assetBlacklistAddress: '0x0000000000000000000000000000000000000000',
        assetWhitelistAddress: '0x0000000000000000000000000000000000000000',
        buySharesCallerWhitelistAddress: '0x0000000000000000000000000000000000000000',
        chainlinkPriceFeedAddress: '0x0000000000000000000000000000000000000000',
        comptrollerLibAddress: '0x0000000000000000000000000000000000000000',
        entranceRateBurnFeeAddress: '0x0000000000000000000000000000000000000000',
        entranceRateDirectFeeAddress: '0x0000000000000000000000000000000000000000',
        feeManagerAddress: '0x0000000000000000000000000000000000000000',
        fundActionsWrapperAddress: '0x0000000000000000000000000000000000000000',
        fundDeployerAddress: '0x0000000000000000000000000000000000000000',
        guaranteedRedemptionAddress: '0x0000000000000000000000000000000000000000',
        integrationManagerAddress: '0x0000000000000000000000000000000000000000',
        investorWhitelistAddress: '0x0000000000000000000000000000000000000000',
        managementFeeAddress: '0x0000000000000000000000000000000000000000',
        maxConcentrationAddress: '0x0000000000000000000000000000000000000000',
        minMaxInvestmentAddress: '0x0000000000000000000000000000000000000000',
        performanceFeeAddress: '0x0000000000000000000000000000000000000000',
        policyManagerAddress: '0x0000000000000000000000000000000000000000',
        valueInterpreterAddress: '0x0000000000000000000000000000000000000000',
        vaultLibAddress: '0x0000000000000000000000000000000000000000',
      },
      v3: {
        adapterBlacklistAddress: '0x0000000000000000000000000000000000000000',
        adapterWhitelistAddress: '0x0000000000000000000000000000000000000000',
        aggregatedDerivativePriceFeedAddress: '0x0000000000000000000000000000000000000000',
        assetBlacklistAddress: '0x0000000000000000000000000000000000000000',
        assetWhitelistAddress: '0x0000000000000000000000000000000000000000',
        buySharesCallerWhitelistAddress: '0x0000000000000000000000000000000000000000',
        chainlinkPriceFeedAddress: '0x0000000000000000000000000000000000000000',
        comptrollerLibAddress: '0x0000000000000000000000000000000000000000',
        entranceRateBurnFeeAddress: '0x0000000000000000000000000000000000000000',
        entranceRateDirectFeeAddress: '0x0000000000000000000000000000000000000000',
        feeManagerAddress: '0x0000000000000000000000000000000000000000',
        fundActionsWrapperAddress: '0x0000000000000000000000000000000000000000',
        fundDeployerAddress: '0x0000000000000000000000000000000000000000',
        guaranteedRedemptionAddress: '0x0000000000000000000000000000000000000000',
        integrationManagerAddress: '0x0000000000000000000000000000000000000000',
        investorWhitelistAddress: '0x0000000000000000000000000000000000000000',
        managementFeeAddress: '0x0000000000000000000000000000000000000000',
        maxConcentrationAddress: '0x0000000000000000000000000000000000000000',
        minMaxInvestmentAddress: '0x0000000000000000000000000000000000000000',
        performanceFeeAddress: '0x0000000000000000000000000000000000000000',
        policyManagerAddress: '0x0000000000000000000000000000000000000000',
        valueInterpreterAddress: '0x0000000000000000000000000000000000000000',
        vaultLibAddress: '0x0000000000000000000000000000000000000000',
      },
      v4: {
        allowedAdapterIncomingAssetsPolicyAddress: environment.contracts.AllowedAdapterIncomingAssetsPolicy,
        allowedAdaptersPerManagerPolicyAddress: environment.contracts.AllowedAdaptersPerManagerPolicy,
        allowedAdaptersPolicyAddress: environment.contracts.AllowedAdaptersPolicy,
        allowedAssetsForRedemptionPolicyAddress: environment.contracts.AllowedAssetsForRedemptionPolicy,
        allowedDepositRecipientsPolicyAddress: environment.contracts.AllowedDepositRecipientsPolicy,
        allowedExternalPositionTypesPerManagerPolicyAddress:
          environment.contracts.AllowedExternalPositionTypesPerManagerPolicy,
        allowedExternalPositionTypesPolicyAddress: environment.contracts.AllowedExternalPositionTypesPolicy,
        allowedRedeemersForSpecificAssetsPolicyAddress: environment.contracts.AllowedRedeemersForSpecificAssetsPolicy,
        allowedSharesTransferRecipientsPolicyAddress: environment.contracts.AllowedSharesTransferRecipientsPolicy,
        arbitraryLoanTotalNominalDeltaOracleModuleAddress:
          environment.contracts.ArbitraryLoanTotalNominalDeltaOracleModule,
        auraBalancerV2LpStakingAdapterAddress: '0x0000000000000000000000000000000000000000',
        balancerV2LiquidityAdapterAddress: environment.contracts.BalancerV2LiquidityAdapter,
        convexCurveLpStakingAdapterAddress: '0x0000000000000000000000000000000000000000',
        compoundV3AdapterAddress: environment.contracts.CompoundV3Adapter,
        comptrollerLibAddress: environment.contracts.ComptrollerLib,
        cumulativeSlippageTolerancePolicyAddress: environment.contracts.CumulativeSlippageTolerancePolicy,
        curveLiquidityAdapterAddress: environment.contracts.CurveLiquidityAdapter,
        disallowedAdapterIncomingAssetsPolicyAddress: environment.contracts.DisallowedAdapterIncomingAssetsPolicy,
        entranceRateBurnFeeAddress: environment.contracts.EntranceRateBurnFee,
        entranceRateDirectFeeAddress: environment.contracts.EntranceRateDirectFee,
        exitRateBurnFeeAddress: environment.contracts.ExitRateBurnFee,
        exitRateDirectFeeAddress: environment.contracts.ExitRateDirectFee,
        externalPositionManagerAddress: environment.contracts.ExternalPositionManager,
        feeManagerAddress: environment.contracts.FeeManager,
        fundDeployerAddress: environment.contracts.FundDeployer,
        gasRelayPaymasterFactoryAddress: environment.contracts.GasRelayPaymasterFactory,
        integrationManagerAddress: environment.contracts.IntegrationManager,
        managementFeeAddress: environment.contracts.ManagementFee,
        minAssetBalancesPostRedemptionPolicyAddress: environment.contracts.MinAssetBalancesPostRedemptionPolicy,
        minMaxInvestmentPolicyAddress: environment.contracts.MinMaxInvestmentPolicy,
        minSharesSupplyFeeAddress: environment.contracts.MinSharesSupplyFee,
        noDepegOnRedeemSharesForSpecificAssetsPolicyAddress:
          environment.contracts.NoDepegOnRedeemSharesForSpecificAssetsPolicy,
        onlyRemoveDustExternalPositionPolicyAddress: environment.contracts.OnlyRemoveDustExternalPositionPolicy,
        onlyUntrackDustOrPricelessAssetsPolicyAddress: environment.contracts.OnlyUntrackDustOrPricelessAssetsPolicy,
        performanceFeeAddress: environment.contracts.PerformanceFee,
        policyManagerAddress: environment.contracts.PolicyManager,
        protocolFeeTrackerAddress: environment.contracts.ProtocolFeeTracker,
        unpermissionedActionsWrapperAddress: environment.contracts.UnpermissionedActionsWrapper,
        valueInterpreterAddress: environment.contracts.ValueInterpreter,
        vaultLibAddress: environment.contracts.VaultLib,
      },
    },
  },
};
